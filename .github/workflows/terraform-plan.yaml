name: Terraform Plan

on:
    pull_request:
        branches:
            - main
        types:
            - opened
            - synchronize
    workflow_dispatch:

defaults:
    run:
        working-directory: ./infra/terraform

jobs:
    terraform:
        runs-on: ubuntu-latest
        permissions:
            contents: read
            pull-requests: write

        steps:
            - name: Checkout
              uses: actions/checkout@v4

            - name: Azure Login
              uses: azure/login@v2
              with:
               creds: ${{ secrets.AZURE_CREDENTIALS }}

            - name: Install Terraform
              uses: hashicorp/setup-terraform@v3

            - name: Terraform Format
              id: fmt
              run: terraform fmt -check -no-color
              continue-on-error: true

            - name: Terraform Init
              id: init
              run: terraform init

            - name: Terraform Validate
              id: validate
              run: terraform validate -no-color

            - name: Terraform Plan
              id: plan
              run: |
                terraform plan -no-color
              continue-on-error: true

            - name: Comment PR
              if: github.event_name == 'pull_request'
              uses: actions/github-script@v7
              env:
                PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
              with:
                github-token: ${{ secrets.GITHUB_TOKEN }}
                script: |
                    // 1. Retrieve existing bot comments for the PR
                    const { data: comments } = await github.rest.issues.listComments({
                        owner: context.repo.owner,
                        repo: context.repo.repo,
                        issue_number: context.issue.number,
                    })
                    const botComment = comments.find(comment => {
                        return comment.user.type === 'Bot' && comment.body.includes('Terraform Format and Style')
                    })

                    // 2. Prepare format of the comment
                    const output = `#### Terraform Format and Style 🖌\`${{ steps.fmt.outcome }}\`
                    #### Terraform Initialization ⚙️\`${{ steps.init.outcome }}\`
                    #### Terraform Validation 🤖\`${{ steps.validate.outcome }}\`
                    <details><summary>Validation Output</summary>

                    \`\`\`\n
                    ${{ steps.validate.outputs.stdout }}
                    \`\`\`

                    </details>

                    #### Terraform Plan 📖\`${{ steps.plan.outcome }}\`

                    <details><summary>Show Plan</summary>



                    </details>

                    // 3. If we have a comment, update it, otherwise create a new one
                    if (botComment) {
                        github.rest.issues.updateComment({
                        owner: context.repo.owner,
                        repo: context.repo.repo,
                        comment_id: botComment.id,
                        body: output
                        })
                    } else {
                        github.rest.issues.createComment({
                        issue_number: context.issue.number,
                        owner: context.repo.owner,
                        repo: context.repo.repo,
                        body: output
                        })
                    }

                